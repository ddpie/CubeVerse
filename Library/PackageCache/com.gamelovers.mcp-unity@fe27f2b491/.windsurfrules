## 1. Project Structure

- The project consists of two main parts:
  - Editor/: A C# Unity Editor package that exposes Unity Editor functionality via a WebSocket bridge.
  - Server/: A Node.js server implementing the Model Context Protocol (MCP), using the official TypeScript SDK.

## 2. Communication & Protocol

- Communication between the Unity Editor and the Node.js MCP server is handled via WebSockets.
- The Unity side uses the `websocket-sharp` library: https://github.com/sta/websocket-sharp/tree/master/websocket-sharp/Server
- The Node.js server uses the `@modelcontextprotocol/sdk` for protocol implementation and exposes tools/resources to LLMs and AI clients.

## 3. Minimum Supported Versions

- Unity: 2022.3 or newer
- Node.js: 18.0.0 or newer

## 4. Key Components

### Unity Editor Package (Editor/)

- **McpUnityServer**: Singleton entry point for the Unity-side server. Registers tools/resources, manages WebSocket connections, and handles requests from Node.js.
- **McpUnitySocketHandler**: Handles WebSocket messages/events, dispatches tool/resource calls, and manages client connections.
- **Tools**: Modular C# classes implementing various Unity actions (e.g., running tests, modifying the scene, package management).
- **Resources**: Read-only endpoints for querying Unity state (e.g., assets, hierarchy, logs).
- **Services**: Dependency-injected logic for test running, logging, etc., improving testability and maintainability.
- **Utils**: Utility classes for configuration, logging, and workspace integration.

### Node.js Server (Server/)

- **index.ts**: Entry point. Sets up the MCP server, registers all tools/resources, and initializes the Unity bridge.
- **unity/mcpUnity.js**: Handles low-level communication with the Unity Editor via WebSocket.
- **tools/**: Implements MCP tool endpoints (e.g., run tests, add asset, select object).
- **resources/**: Implements MCP resource endpoints (e.g., get hierarchy, get logs).
- **utils/**: Logging and helper utilities.
- **package.json**: Declares dependencies, including `@modelcontextprotocol/sdk`, `ws`, `express`, etc.

## 5. Integration & Usage

- The Unity Editor package is designed to be used as a package (via UPM or direct import).
- The Node.js server can be started independently and connects to Unity via WebSocket (port configurable, default 8090).
- The system is designed for use with LLM-based IDEs (e.g., Windsurf, Cursor, Claude Desktop) to enable AI-powered Unity Editor automation and queries.

## 6. Configuration

- Configuration utilities are provided for generating and injecting MCP config into various IDEs (Cursor, Claude Desktop, Windsurf).
- Unity-side settings are persisted in `ProjectSettings/McpUnitySettings.json`.

## 7. Extensibility

- Tools and resources can be extended by adding new C# classes (Unity) or TypeScript modules (Node.js).
- Dependency injection is used on the Unity side for improved modularity and testability.

## 8. References

- MCP Protocol: https://modelcontextprotocol.io
- TypeScript SDK: https://github.com/modelcontextprotocol/typescript-sdk
- Inspector: https://github.com/modelcontextprotocol/inspector

## 9. Conventions

- Use WebSockets for all cross-process communication.
- Follow the MCP protocol for all tool/resource definitions.
- All new tools/resources should be registered in both Unity and Node.js server entry points.
- Follow Conventional Commits for all commit messages.

## 10. Debugging with MCP Inspector

To debug the MCP Node.js server using the Model Context Protocol Inspector, run the following command from the project root:

```shell
npx @modelcontextprotocol/inspector node Server/build/index.js
```

This will launch the MCP Inspector, allowing you to inspect and debug live MCP traffic between the Node.js server and connected clients (such as Unity or LLM IDEs).